# -*- coding: utf-8 -*-
"""day6

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F-NZfSI1SdZyygfhkwQcl3gOn_zTpEvU
"""

import numpy as np
import pandas as pd
from scipy import stats
data = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
import numpy as np
import pandas as pd
from scipy import stats
data = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
mean_value = np.mean(data)
print(f"Mean: {mean_value}")

variance = np.var(data, ddof=1)
std_dev = np.std(data, ddof=1)
print(f"Variance: {variance}, Standard Deviation: {std_dev}")

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
data = {
    'Math': [80, 85, 78, 90, 88, 92, 76, 89, 95, 84],
    'Science': [75, 82, 79, 91, 87, 95, 72, 88, 97, 83],
    'English': [85, 80, 78, 88, 90, 85, 76, 89, 92, 81]
}
df = pd.DataFrame(data)
correlation_matrix = df.corr()
plt.figure(figsize=(6, 4))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Student Scores Correlation Heatmap")
plt.show()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
data = [10, 12, 14, 15, 17, 20, 30, 100]
df = pd.DataFrame(data, columns=['values'])
Q1 = df['values'].quantile(0.25)
Q3 = df['values'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
outliers = df[(df['values'] < lower_bound) | (df['values'] > upper_bound)]
plt.boxplot(df['values'])
plt.title("Box Plot to Detect Outliers")
plt.show()
print("Outliers:\n", outliers)

from scipy import stats
import numpy as np
data = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
data_array = np.array(data)
z_scores = np.abs(stats.zscore(data_array))

outliers = data_array[z_scores > 3]

print("Outliers using Z-score method:", outliers)

plt.scatter(range(len(data)), data, color='blue', label="Data Points")
plt.scatter([data.index(100)], [100], color='red', label="Outlier")
plt.xlabel("Index")
plt.ylabel("Values")
plt.title("Scatter Plot Showing Outlier")
plt.legend()
plt.show()

import pandas as pd
data = pd.DataFrame({'Category': ['Apple', 'Banana', 'Apple', 'Orange', 'Banana', 'Apple']})
print(data['Category'].value_counts())
print(data['Category'].value_counts(normalize=True) * 100)

import matplotlib.pyplot as plt
import seaborn as sns
categories = ['Apple', 'Banana', 'Apple', 'Orange', 'Banana', 'Apple']
df = pd.DataFrame({'Category': categories})
df['Category'].value_counts().plot(kind='bar', color=['red', 'yellow', 'orange'])
plt.xlabel("Category")
plt.ylabel("Count")
plt.title("Bar Plot of Categorical Data")
plt.show()
sns.countplot(x=df['Category'], palette="pastel")
plt.title("Count Plot of Categorical Data")
plt.show()

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
df = pd.DataFrame({'Fruit': ['Apple', 'Banana', 'Orange', 'Apple', 'Banana']})
label_encoder = LabelEncoder()
df['Fruit_Label'] = label_encoder.fit_transform(df['Fruit'])
print(df)
df_one_hot = pd.get_dummies(df['Fruit'])
print(df_one_hot)

!pip install ydata-profiling
import pandas as pd
from ydata_profiling import ProfileReport
df = pd.read_csv("https://raw.githubusercontent.com/mwaskom/seaborn-data/master/titanic.csv")
profile = ProfileReport(df, explorative=True)
profile.to_notebook_iframe()
import pandas as pd
from ydata_profiling import ProfileReport
df = pd.read_csv("https://raw.githubusercontent.com/mwaskom/seaborn-data/master/titanic.csv")
profile = ProfileReport(df, explorative=True)
profile.to_notebook_iframe()
profile.to_file("titanic_report.html")

!pip install numpy==1.24.3 sweetviz==2.1.4
!pip install --upgrade pandas sweetviz
import sweetviz as sv
import pandas as pd
df = pd.read_csv("https://raw.githubusercontent.com/mwaskom/seaborn-data/master/titanic.csv")
report = sv.analyze(df)
report.show_html("titanic_sweetviz.html")

!pip install dtale
import dtale
dtale.show(df)

import numpy as np